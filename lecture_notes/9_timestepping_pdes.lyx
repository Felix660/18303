#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Timestepping PDEs
\end_layout

\begin_layout Author
Chris Rackauckas
\end_layout

\begin_layout Section
Backwards Differentiation Formulae
\end_layout

\begin_layout Standard
Polynomial interpolation
\begin_inset Formula 
\[
y'=\frac{3y_{i}-4y_{i-1}+y_{i-2}}{2\Delta t}+\mathcal{O}(\Delta t^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{n+2}-\frac{4}{3}y_{n+1}+\frac{1}{3}y_{n}=\frac{2}{3}hf(t_{n+2},y_{n+2})
\]

\end_inset

Starting method is Euler.
 Solving:
\begin_inset Formula 
\[
y_{n+2}-\frac{2}{3}hf(t_{n+2},y_{n+2})-\frac{4}{3}y_{n+1}+\frac{1}{3}y_{n}=0
\]

\end_inset


\begin_inset Formula 
\[
J(x_{n})=x_{n}-\frac{2}{3}hf'(x_{n})
\]

\end_inset

 
\begin_inset Formula 
\[
x_{n+1}=x_{n}-J^{-1}(x_{n})f(x_{n})
\]

\end_inset

 Steps for Newton-Krylov BDF2:
\begin_inset Formula 
\begin{align*}
f_{n} & =f(x_{n})\\
J(x_{n})z_{n} & =f_{n}\\
z_{n} & =gmres(J,f_{n})\\
x_{n+1} & =x_{n}+z_{n}
\end{align*}

\end_inset

 Using the non-uniform BDF discretization, we get
\begin_inset Formula 
\[
y_{n+2}-\frac{\left(1+\omega_{n+1}\right)^{2}}{1+2\omega_{n+1}}y_{n+1}+\frac{\omega_{n+1}^{2}}{1+2\omega_{n+1}}y_{n}=h_{n+2}\frac{1+\omega_{n+1}}{1+2\omega_{n+1}}f_{n+2}
\]

\end_inset

 where 
\begin_inset Formula $\omega_{n+1}=h_{n+2}/h_{n+1}$
\end_inset

, 
\begin_inset Formula $h_{n+2}=t_{n+2}-t_{n+1}$
\end_inset

, 
\begin_inset Formula $h_{n+1}=t_{n+1}-t_{n}$
\end_inset

.
 By checking against the 3rd derivative, one can derive:
\begin_inset Formula 
\[
LTE\approx est=\frac{\left(h_{n+1}+h_{n+2}\right)}{6}\left[\frac{y_{n+2}-y_{n+1}}{h_{n+2}}-\left(1+\frac{h_{n+2}}{h_{n+1}}\right)\frac{y_{n+1}-y_{n}}{h_{n+1}}+\frac{h_{n+2}}{h_{n+1}h_{n}}\left(y_{n}-y_{n-1}\right)\right]
\]

\end_inset

 where 
\begin_inset Formula $h_{n}=t_{n}-t_{n-1}$
\end_inset

.
 Then we check
\begin_inset Formula 
\[
q=\left(0.9\Vert\frac{y*reltol-abstol}{est}\Vert\right)^{\frac{1}{3}}
\]

\end_inset

 and then 
\begin_inset Formula $h_{n+1}=qh_{n}$
\end_inset

, where if 
\begin_inset Formula $q<1$
\end_inset

 you reject the step.
\end_layout

\begin_layout Section
Pseudospectral
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u_{t}=u_{xx}+f
\]

\end_inset

 write in the Fourier basis, get an ODE.
 But how to compute f?
\begin_inset Formula 
\[
\overline{u}^{\prime}=A\overline{u}+\mathcal{F}\left(f\left(\mathcal{F}^{-1}\left(u\right)\right)\right)
\]

\end_inset

 is an ODE for the coefficients.
\end_layout

\begin_layout Section
Norsett-Euler and ExpRB
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u^{\prime}=Au+f(u)
\]

\end_inset

 
\begin_inset Formula 
\[
u(t)=e^{-tA}u_{0}+\int_{0}^{t}e^{-\left(t-\tau\right)A}f(u(\tau))d\tau
\]

\end_inset


\begin_inset Formula 
\[
u_{n+1}=e^{-hA}u_{n}+h\varphi_{1}\left(-hA\right)f(u_{n})
\]

\end_inset

 where
\begin_inset Formula 
\[
\varphi_{1}(z)=\frac{e^{z}-1}{z}
\]

\end_inset

 or
\begin_inset Formula 
\[
u_{n+1}=e^{-hA}u_{n}+A\left(e^{-hA}-1\right)f(u_{n})
\]

\end_inset

 This can be made into a Runge-Kutta method on the exponentials.
 For example, one well-known method due to Hochbruck, known as exprb32,
 is:
\begin_inset Formula 
\begin{align*}
k & =u_{n}+h_{n}\varphi_{1}\left(h_{n}A\right)f(u_{n})\\
u_{n+1} & =u_{n}+h_{n}\varphi_{1}\left(h_{n}A_{n}\right)f(u_{n})+h_{n}2\varphi_{3}\left(h_{n}A\right)D
\end{align*}

\end_inset

 where
\begin_inset Formula 
\[
D=f(k)-f(u_{n})
\]

\end_inset

 Notice that this method has 
\begin_inset Formula $k$
\end_inset

 as the Norsett-Euler method, and thus 
\begin_inset Formula $u_{n+1}-k$
\end_inset

 is an error estimator which can be used for adaptive time stepping.
 As a side note, this method can be applied to fully nonlinear ODEs/PDEs
 as well via linearization.
 If you let
\begin_inset Formula 
\[
u^{\prime}=g(u)
\]

\end_inset

 and then you can split via
\begin_inset Formula 
\[
u^{\prime}=g^{\prime}(u)+h(u)
\]

\end_inset

 where 
\begin_inset Formula $h(u)=g(u)-g^{\prime}(u)$
\end_inset

.
 This is known as an exponential Rosenbrock method.
\end_layout

\begin_layout Section
IMEX
\end_layout

\begin_layout Standard
IMEX methods are also known as 
\begin_inset Quotes eld
\end_inset

multi-rate solvers
\begin_inset Quotes erd
\end_inset

 given there ability to directly handle equations in different forms.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{dy}{dt}=f(y,p,t)+g(y,p,t)
\]

\end_inset

 Do a different method on the two parts.
 Simplest is IMEX Euler: do explicit Euler on 
\begin_inset Formula $g$
\end_inset

 while you do implicit Euler on 
\begin_inset Formula $f$
\end_inset

, which looks like:
\begin_inset Formula 
\[
y_{n+1}=y_{n}+\Delta tf(y_{n+1})+\Delta tg(y_{n+1})
\]

\end_inset

 Notice that the linear structure for solving these equations is exactly
 the same, 
\begin_inset Formula $G(y_{n+1})=0$
\end_inset

 gives a nonlinear system with 
\begin_inset Formula $G^{\prime}=I-\Delta tf^{\prime}$
\end_inset

 which is the same Jacobian as implicit Euler, but now only on the 
\begin_inset Formula $f$
\end_inset

 part.
 This can be extended to some higher order methods as well.
 For example, Crank-Nicholson Adams Bashforth 2.
\begin_inset Formula 
\[
y_{n+1}=y_{n}+\Delta t\left[\frac{3}{2}g(y_{n})-\frac{1}{2}g(y_{n-1})\right]+\frac{\Delta t}{2}\left[f(y_{n+1})+f(y_{n})\right]
\]

\end_inset

SBDF2
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{n+1}=\frac{4}{3}y_{n}-\frac{1}{3}y_{n-1}+\frac{2}{3}\Delta t\left[2g(y_{n})-g(y_{n-1})\right]+\frac{2}{3}\Delta tf(y_{n+1})
\]

\end_inset

 However, you can only do 
\begin_inset Quotes eld
\end_inset

trivial
\begin_inset Quotes erd
\end_inset

 mixing up to second order.
 To get higher than second order, you need the methods to satisfy extra
 order conditions, and thus have to directly derive a method that can satisfy
 the conditions.
 A popular class of IMEX methods are the ESDIRK methods of Kennedy and Carpenter.
\end_layout

\begin_layout Section
Two-Dimensional Crank-Nicholson Improvement: ADI
\end_layout

\begin_layout Standard
Now let's try to see if there's a more clever way to solve the 2-dimensional
 semilinear heat equation which utilizes some of the structure of the equation
 itself.
 Our equation is
\begin_inset Formula 
\[
u_{t}=\Delta u+f(u)=u_{xx}+u_{yy}+f(u)
\]

\end_inset

 When we discretize via finite differences (or pseudospectral), we get:
\begin_inset Formula 
\[
u_{t}=A_{x}u+A_{y}u+f(u)
\]

\end_inset

 Crank-Nicholson-Euler is then
\begin_inset Formula 
\begin{align*}
\frac{u_{n+1}-u_{n}}{\Delta t} & =\frac{A_{x}u_{n+1}+A_{y}u_{n+1}}{2}+\frac{A_{x}u_{n}+A_{y}u_{n}}{2}+f(u_{n})\\
\left(I-\frac{\Delta t}{2}A_{x}-\frac{\Delta t}{2}A_{y}\right)u_{n+1} & =u_{n}+\Delta t\left(\frac{A_{x}u_{n}+A_{y}u_{n}}{2}+f(u_{n})\right)
\end{align*}

\end_inset

 The trick is now to notice that
\begin_inset Formula 
\[
I-\frac{\Delta t}{2}A_{x}-\frac{\Delta t}{2}A_{y}-\frac{\Delta t^{2}}{4}A_{x}A_{y}=\left(I-\frac{\Delta t}{2}A_{x}\right)\left(I-\frac{\Delta t}{2}A_{y}\right)
\]

\end_inset

 and so
\begin_inset Formula 
\[
\left(I-\frac{\Delta t}{2}A_{x}-\frac{\Delta t}{2}A_{y}\right)=\left(I-\frac{\Delta t}{2}A_{x}\right)\left(I-\frac{\Delta t}{2}A_{y}\right)+\mathcal{O}\left(\Delta t^{2}\right)
\]

\end_inset

 and thus
\begin_inset Formula 
\[
\left(I-\frac{\Delta t}{2}A_{x}\right)\left(I-\frac{\Delta t}{2}A_{y}\right)u_{n+1}=u_{n}+\Delta t\left(\frac{A_{x}u_{n}+A_{y}u_{n}}{2}+f(u_{n})\right)
\]

\end_inset

 keeps second order accuracy.
 If you write 
\begin_inset Formula $u_{n}$
\end_inset

 as a matrix, this is much easier to solve because 
\begin_inset Formula $A=A_{y}u+uA_{x}$
\end_inset

 as tridiagonal matrices, and so we can keep 
\begin_inset Formula $A_{x}$
\end_inset

 and 
\begin_inset Formula $A_{y}$
\end_inset

 as small tridiagonals and do,
\begin_inset Formula 
\begin{align*}
v & =u_{n}+\Delta t\left(\frac{A_{x}u_{n}+A_{y}u_{n}}{2}+f(u_{n})\right)\\
w & =v\backslash\left(I-\frac{\Delta t}{2}A_{x}\right)\\
u_{n+1} & =\left(I-\frac{\Delta t}{2}A_{y}\right)\backslash w
\end{align*}

\end_inset

 This is known as the ADI scheme, or the Alternative Direction Implicit
 scheme.
\end_layout

\begin_layout Standard
But this idea can be applied much more broadly as a matrix factorization
 approximation.
 Notice that the crux of the method is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(I-\frac{\Delta t}{2}A_{x}-\frac{\Delta t}{2}A_{y}\right)=\left(I-\frac{\Delta t}{2}A_{x}\right)\left(I-\frac{\Delta t}{2}A_{y}\right)+\mathcal{O}\left(\Delta t^{2}\right)
\]

\end_inset

 This applies even when the linear operators are Jacobians.
 So take for example the implicit Euler scheme.
 If we know of a good splitting for our equation:
\begin_inset Formula 
\[
u^{\prime}=f_{1}(u)+f_{2}(u)
\]

\end_inset

 then the implicit Euler scheme gives Newton iterations like
\begin_inset Formula 
\[
G^{\prime}(x_{n})=\left(I-\Delta tf_{1}^{\prime}(x_{n})-\Delta tf_{2}^{\prime}\left(x_{n}\right)\right)=\left(I-\Delta tf_{1}^{\prime}\right)\left(I-\Delta tf_{2}^{\prime}\right)+\mathcal{O}\left(\Delta t^{2}\right)
\]

\end_inset

 This means you can solve two easy linear systems instead of one hard one!
 This can be applied to any of the implicit schemes, such as BDF2, and can
 be incorporated into the IMEX methods as well.
\end_layout

\end_body
\end_document
